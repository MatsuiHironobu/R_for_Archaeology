[["index.html", "考古学のための「R」入門 1 はじめに", " 考古学のための「R」入門 松井 広信 2025-01-03 ( Last Update: 2025-01-05 ) 1 はじめに 考古学は、人類が残した遺跡や遺構、またはそこから出土する遺物を調査・分析することで、文字に残らない人類の歴史や文化を明らかにする学問分野です。日本の考古学では型式学的な研究が主流ですが、1990年代以降は定量的なデータ分析も盛んに行われるようになりました。このような大量のデータを効率的に処理し、再現可能な研究を行うための強力なツールとして、コンピュータのソフトウェアが有用です。 特に本書で使用する「R」では、データ分析や可視化といった作業を効率的に行うことができ、さまざまな分野の研究者やデータサイエンティストの間で幅広く使用されています。 日本の考古学におけるRの利用は始まったばかりで、近年その有用性が認知され始めました。例えば、野口淳氏が主催する「考古形態測定学研究会」が『考古学・文化財のためのデータサイエンス・サロン』で米ワシントン大学のBen Marwick氏や英サザンプトン大学のChristian Hoggard氏を招き、Rとそのパッケージを用いたハンズ・オンの講習会を開催しています。また、石井淳平氏はデータを可視化する実践例を紹介する(石井, 2020)など、考古学においてもRを利用した研究に関心が高まっています。筆者も2018年頃からRを利用した考古学研究を行っており、その一部をコード付きで公開しています。 本書は考古学の研究者に役に立つよう、実際のデータを使用し、データの編集から解析、可視化に至るまでの一連のながれをできるだけコンパクトにまとめたものです。Rの基本的な文法や機能は、すでにさまざまな入門書や解説書が出版されているため、必要最低限な内容に留めたいと思います。 "],["統計解析言語r.html", "2 統計解析言語「R」 2.1 「R」とは 2.2 「R」と「RStudio」の導入", " 2 統計解析言語「R」 2.1 「R」とは Rは統計解析とグラフィックスのためのプログラミング言語及び環境です。オープンソースのフリーソフトウェアで、WindowsやMacOSなど様々なプラットフォームで利用することができます。そのため、コンピューターを所有している者なら誰でもRを使って分析方法を共有し、同じ結果を再現する可能性が高くなります。これは、科学的手法である「再現性」にも大いに役立ちます。 さらに、Rにはコード、データ、ドキュメント等が一つになったパッケージがあります。2023年3月現在でCRAN（the Comprehensive R Archive Networkの略）で利用可能なパッケージは19,000以上あり(Wickham &amp; Bryan, 2023)、統計解析をはじめとしたデータ分析、機械学習、データの可視化など様々な分野の研究に対応しています。 例えば、本書でも利用するtidyverseに組み込まれたdplyrはデータの編集に、ggplot2はデータの可視化に特化しており、これらパッケージを使用すれば、分析や研究を効率的に行うことができます。 2.2 「R」と「RStudio」の導入 RはThe R Project for Statistical Computingから最新版をダウンロードし、それぞれのパソコンの指示に従ってインストールします。 RStudioはRの統合開発環境（IDE : Integrated Development Environment）で、Rを使いやすくするデスクトップアプリケーションです。RMarkdownを使ってプログラミングコードとドキュメントを統合した文書を作成し、Knitrでhtmlやwordなどに書き出すことができます。本書では記載していませんが、GitHubと連携すればバージョン管理や共同執筆者との共有も可能となります。公式サイトにアクセスし、インストーラーをダウンロードします（図2.1）。 図 2.1: RStuioのダウンロード画面 "],["データの編集.html", "3 データの編集 3.1 概要 3.2 「R」の演算子について 3.3 tidy data 3.4 データを取り込む 3.5 filter()による行の絞り込み 3.6 select()による列の操作 3.7 mutate()による列の編集 3.8 summarize()による概要表", " 3 データの編集 3.1 概要 ここでは、準備したデータを取り込み、編集するための方法を紹介します。考古学研究でデータといえば、Microsoft社のExcelに記録したデータが思い浮かぶことでしょう。Excelは基本的な機能だけなら簡単な操作で表の作成・編集ができるだけでなく、広く使用されていることから複数の作業者間でのデータの共有等にも役に立つソフトです。一方、神エクセル1という用語が端的に示すように、セルの書式をわざわざ文字列としたり、セルの結合や罫線機能などを駆使した見た目重視のファイルも散見され、データ分析に使用しにくいことも知られています。 RではいくつかのパッケージでExcelファイル（.xlsxの拡張子で表示されるもの）を直接取り込むこともできますが、上記の理由から使いづらいことが考えられます。そこで、本稿ではプレーンなテキスト形式で、さまざまなアプリやソフトで使用することができるCSVファイル（.csvの拡張子で表示されるもの）を利用することが良いと考えています。幸いExcelにはCSVファイルで保存する機能があるため、これまでの研究で蓄積したデータも利用することができます。 Rでデータを編集する際はtidyverseパッケージを使います。tidyverseはデータサイエンスのために設計されたRのパッケージ群で、ggplot2のほか、dplyr、readr、purrr、tibble、stringr、forcatsといったパッケージが含まれています。これらは共通の基本的な設計思想、文法、データ構造を有しており、Rの標準的な表現方法（正規表現）よりも可読性の高いコードを用いてデータの前処理、可視化を実行することができます。Rでパッケージを読み込む際はlibrary()関数を使います。 # `library()`でパッケージを読み込む library(tidyverse) 3.2 「R」の演算子について 本題に入る前に、Rでよく使う演算子の説明をしておきます。&lt;-は代入演算子で、左辺に右辺を代入するために使用されます。数学の\\(x=\\)をイメージすると良いと思います。&lt;-の代わりに=を使用することもできます。ここではfishという箱にtest_data.csvというファイルのデータを格納しています。 また%&gt;%はパイプ演算子で、左辺の結果を右辺に受け渡す役割があり、コードを繋げて書くことができます。コードを記入するたびに適当な変数に代入する必要がなくなるため、可読性が高まり、効率的な作業を実現できます。“Plumbers, chains, and famous painters: The (updated) history of the pipe operator in R”(Álvarez, 2021)によると、2012年1月17日にStack Overflowで原型が誕生し、Stefan Bache氏が2013年12月30日にplumbrパッケージを公開し（2日後にmagrittrに改名）、その後dplyrのパイプ演算子への統合、Rstudioでのショートカットの採用（Ctrl / Command + Shift + M）を経て、その利便性が注目されて急速に普及しました。現在ではmagrittrもしくはtidyverseパッケージを読み込めば使用できます。 2019年からはRの開発チームが|&gt;（ベースパイプ）を開発し、2021年5月にリリースされたR 4.1.0で本格的に実装され、その後改良が重ねられて%&gt;%と遜色ない機能に発展したため、現在ではユーザーのモードが%&gt;%から|&gt;に 移りつつあるようです。（本書では切り替えが大変なので%&gt;%を利用します。） 3.3 tidy data はじめに、人間が見やすいデータ形式と、Rをはじめとしたプログラミング言語で機械処理しやすいデータ形式が異なるということを理解しておく必要があります。例えば生徒の名前と教科、点数からなる表があるとします。 表 3.1: 横長型の表 生徒 国語 数学 英語 社会 理科 A 85 90 75 85 82 B 92 88 80 90 85 C 78 95 85 88 90 D 88 85 78 90 92 E 79 90 85 85 88 F 95 92 90 88 85 表3.1のような1つの観測値に複数の変数が含まれる表形式を横長型（Wide Format）といいます。人間がみる場合はこの表形式が見やすく、教科書や論文で掲載されるものもこのような形式です。 一方、表3.3のような1つの観測値に1つの変数が含まれる表形式を縦長型（Long Format）といい、各列が異なる変数を示し、各行が1つの観測値（属性、数値）を表します。これがtidyverseでいうtidy data（整然データ）で、はじめHadley Wickhamが2014年に論文で定義が示され(Wickham, 2014)、“R for Data Science”(Wickham &amp; Grolemund, 2017)、“R for Data Science (2e)”(Wickham et al., 2023)で改訂されています（表3.2）。最新の定義を翻訳すると次の通りとなります。 各変数は列であり、各列は変数である 各観測値は行であり、各行は観測値である 各変数はセルであり、各セルはひとつの値である – Wickhamほか2023 より翻訳 表 3.2: tidy dataの定義の変遷 Source Definition Wickham 2014 Each variable forms a column. Wickham 2014 Each observation forms a row. Wickham 2014 Each type of observational unit forms a table. Wickham &amp; Grolemund 2017 Each variable must have its own column. Wickham &amp; Grolemund 2017 Each observation must have its own row. Wickham &amp; Grolemund 2017 Each value must have its own cell. Wickham et.al. 2023 Each variable is a column; each column is a variable. Wickham et.al. 2023 Each observation is a row; each row is an observation. Wickham et.al. 2023 Each value is a cell; each cell is a single value. 3.3.1 tidy dataに変換する 横長型から縦長型に変換する時は、tidyr::pivot_longerで変換することができます（表3.3）。その逆を行いたい場合は、tidyr::pivot_widerを使います（表3.4）。 student_data_tidy &lt;- student_data %&gt;% tidyr::pivot_longer(cols = !生徒, # 動かすデータを選択（`!`で動かさないもの） names_to = &quot;科目&quot;, values_to = &quot;点数&quot;) # htmlでキャプションを表示する場合。 # wordで書き出す場合は{r tab.cap=&quot;&quot;}でいける。 student_data_tidy %&gt;% head(n = 10) %&gt;% knitr::kable(caption = &quot;横長型から縦長型の表へ&quot;) 表 3.3: 横長型から縦長型の表へ 生徒 科目 点数 A 国語 85 A 数学 90 A 英語 75 A 社会 85 A 理科 82 B 国語 92 B 数学 88 B 英語 80 B 社会 90 B 理科 85 student_data_tidy %&gt;% tidyr::pivot_wider(names_from = 科目, values_from = 点数) %&gt;% knitr::kable(caption = &quot;縦長型から再び横長型の表へ&quot;) 表 3.4: 縦長型から再び横長型の表へ 生徒 国語 数学 英語 社会 理科 A 85 90 75 85 82 B 92 88 80 90 85 C 78 95 85 88 90 D 88 85 78 90 92 E 79 90 85 85 88 F 95 92 90 88 85 3.3.2 クロス集計表の変換 クロス集計表は人間が見やすい横長型の表形式です。クロス集計表は考古学においても論文や報告書で掲載されていることがあり、データの概要を知るのには便利です。一方、自分で得たデータと比較のために再利用したい場合は一工夫必要で、縦長型に変換するだけでは不十分です。 Rではtidyr::uncount(x)で”x”の数値の分、行を複製することができます。これでクロス集計表からヒストグラムなどを作成することが可能となります。あくまでクロス集計表から擬似的に作成したデータであり、生データではないので、先行研究で採用されているグラフの条件（例えばヒストグラムのビン幅など）を変更することは不適切です。 ここでは例として、村木(2004)で公開されている奈良県天理市中山念仏寺墓地の背光五輪塔の年代と型式データから（表3.5）、縦長型の表に変換し（表3.6）、ヒストグラムを再導出してみます（図3.1）。ヒストグラムについては後述も参照してください。 # データは村木2004の表1（p30）の集計部分を使用 muraki2004 &lt;- readr::read_csv(&quot;analysis/data/muraki2004.csv&quot;) muraki2004 %&gt;% head() %&gt;% knitr::kable(caption = &quot;奈良県天理市中山念仏寺墓地の背光五輪塔の年代と型式（村木2004より）&quot;) 表 3.5: 奈良県天理市中山念仏寺墓地の背光五輪塔の年代と型式（村木2004より） year_start year_end type1 type2 type3 1531 1540 2 0 0 1541 1550 0 0 0 1551 1560 3 0 0 1561 1570 2 0 0 1571 1580 14 0 0 1581 1590 10 0 0 # 縦長型に変換しuncount()で行の複製 muraki2004_long &lt;- muraki2004 %&gt;% tidyr::pivot_longer(cols = !c(year_start, year_end), names_to = &quot;Type&quot;, values_to = &quot;N&quot;) %&gt;% tidyr::uncount(N) %&gt;% # Nの数値分、行を追加する。 dplyr::mutate(dplyr::across(Type, factor)) muraki2004_long %&gt;% head() %&gt;% knitr::kable(caption = &quot;`tidyr::pivot_longer()`と`tidyr::uncount()`で縦長型に変換&quot;) 表 3.6: tidyr::pivot_longer()とtidyr::uncount()で縦長型に変換 year_start year_end Type 1531 1540 type1 1531 1540 type1 1551 1560 type1 1551 1560 type1 1551 1560 type1 1561 1570 type1 muraki2004_long %&gt;% ggplot() + ggplot2::geom_histogram(aes(x = year_start, y = after_stat(count), fill = Type), binwidth = 10, # bin幅の設定 position = &quot;identity&quot;, # alpha = 0.2, # 透明度の設定 colour = &quot;black&quot;, # グラフの枠線の色 boundary = 0) + # ビンの境界を指定 scale_x_continuous(breaks = seq(1530, 1770, 20), limits=c(1530, 1770)) + # x軸の範囲を設定 facet_wrap(~Type, ncol = 1) + labs(x = &quot;年代&quot;, y = &quot;個数&quot;) + theme_bw(base_family = &quot;HiraginoSans-W3&quot;) 図 3.1: クロス集計表から再構成したヒストグラム データの前処理や操作を行うにはdplyrパッケージが便利です。データフレームなどに対して、データの選択や絞り込み、集約といった様々な操作をすることができます。ここでは、主要な機能を使ってデータフレームの加工を行い、実際の分析使用する形にしていきます。 3.4 データを取り込む Rで.xlsxファイルをそのまま読み込むパッケージもありますが、macでは正常に機能しないので、今回は.csvに変換したものを読み込みます。 #### データの読み込み #### # `readr::read_csv()`は`readr`パッケージの機能。`readr::`は、書かなくても機能します。 # Rの標準関数の`read.csv()`でも同様なことができます。 fish &lt;- readr::read_csv(&quot;analysis/data/testdata2.csv&quot;) #### 簡単な編集をしておく #### # `stringi::stri_trans_nfkc`関数で全角を半角にする。 library(stringi) fish &lt;- fish %&gt;% dplyr::mutate(dplyr::across(dplyr::everything(), ~ stringi::stri_trans_nfkc(.))) # データの型を変更 fish &lt;- fish %&gt;% dplyr::mutate(dplyr::across(c(&quot;Period&quot;, &quot;Fish&quot;, &quot;Bone&quot;, &quot;Site&quot;, &quot;Direction&quot;), as.factor)) %&gt;% dplyr::mutate(dplyr::across(PML, as.numeric)) 3.5 filter()による行の絞り込み dplyr::filter()関数は、条件を満たす行のみにデータを絞り込むものです。条件が一致するものは=でなく==である点に注意が必要です。また、不等号で数値の絞り込みもできます。 3.5.1 一条件で絞り込む # `head()`でデータフレームの行頭を表示する。 # `tail()`にするとデータフレームの行末を表示する。 fish %&gt;% dplyr::filter(Period == &quot;2期&quot;) %&gt;% head() ## # A tibble: 6 × 6 ## Fish Bone Direction Period PML Site ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 クロダイ属 前上顎骨 右 2期 NA とある貝塚 ## 2 クロダイ属 前上顎骨 右 2期 NA とある貝塚 ## 3 クロダイ属 歯骨 右 2期 NA とある貝塚 ## 4 クロダイ属 歯骨 右 2期 NA とある貝塚 ## 5 マダイ 前上顎骨 右 2期 NA とある貝塚 ## 6 タイ科 前上顎骨 右 2期 NA とある貝塚 # 大きさ30mm以上に絞り込む fish %&gt;% dplyr::filter(PML &gt;= 30.0) %&gt;% head() ## # A tibble: 6 × 6 ## Fish Bone Direction Period PML Site ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 クロダイ属 前上顎骨 左 1期 30.2 とある貝塚 ## 2 クロダイ属 前上顎骨 右 2期 31.1 とある貝塚 ## 3 クロダイ属 前上顎骨 左 2期 35.5 とある貝塚 ## 4 クロダイ属 前上顎骨 右 2期 32 とある貝塚 ## 5 クロダイ属 前上顎骨 右 2期 32.6 とある貝塚 ## 6 クロダイ属 前上顎骨 左 2期 30.2 とある貝塚 # `!`で否定条件を指定できる。 fish %&gt;% dplyr::filter(Period != &quot;1期&quot;) %&gt;% head() ## # A tibble: 6 × 6 ## Fish Bone Direction Period PML Site ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 タイ科 前上顎骨/歯骨 不明 3期 NA とある貝塚 ## 2 クロダイ属 前上顎骨 右 2期 NA とある貝塚 ## 3 クロダイ属 前上顎骨 右 2期 NA とある貝塚 ## 4 クロダイ属 歯骨 右 2期 NA とある貝塚 ## 5 クロダイ属 歯骨 右 2期 NA とある貝塚 ## 6 マダイ 前上顎骨 右 2期 NA とある貝塚 3.5.2 複数条件による絞り込み 条件を「どちらも満たす（and）」場合は&amp;や,を使用します。条件を「いずれかを満たす（or）」場合は|を、!を使って反転させると条件を「いずれも満たさない」行に絞り込むことができます。 # PMLが30cm以上、時期が`2期`のものに絞り込む fish %&gt;% dplyr::filter(Period == &quot;2期&quot; &amp; PML &gt;= 30.0) %&gt;% head() ## # A tibble: 6 × 6 ## Fish Bone Direction Period PML Site ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 クロダイ属 前上顎骨 右 2期 31.1 とある貝塚 ## 2 クロダイ属 前上顎骨 左 2期 35.5 とある貝塚 ## 3 クロダイ属 前上顎骨 右 2期 32 とある貝塚 ## 4 クロダイ属 前上顎骨 右 2期 32.6 とある貝塚 ## 5 クロダイ属 前上顎骨 左 2期 30.2 とある貝塚 ## 6 クロダイ属 前上顎骨 左 2期 34.1 とある貝塚 # PMLが30cm以上または時期が`2期`に絞り込む fish %&gt;% dplyr::filter(Period == &quot;2期&quot; | PML &gt;= 30.0) %&gt;% head() ## # A tibble: 6 × 6 ## Fish Bone Direction Period PML Site ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 クロダイ属 前上顎骨 右 2期 NA とある貝塚 ## 2 クロダイ属 前上顎骨 右 2期 NA とある貝塚 ## 3 クロダイ属 歯骨 右 2期 NA とある貝塚 ## 4 クロダイ属 歯骨 右 2期 NA とある貝塚 ## 5 マダイ 前上顎骨 右 2期 NA とある貝塚 ## 6 タイ科 前上顎骨 右 2期 NA とある貝塚 # PMLが30cm以上または時期が`2期`以外のものに絞り込む fish %&gt;% dplyr::filter(!(Period == &quot;2期&quot; | PML &gt;= 30.0)) %&gt;% head() ## # A tibble: 6 × 6 ## Fish Bone Direction Period PML Site ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 クロダイ属 前上顎骨 左 1期 20.6 とある貝塚 ## 2 クロダイ属 前上顎骨 右 1期 29.6 とある貝塚 ## 3 クロダイ属 前上顎骨 右 1期 20.4 とある貝塚 ## 4 クロダイ属 前上顎骨 左 1期 29.5 とある貝塚 ## 5 クロダイ属 前上顎骨 右 1期 24.4 とある貝塚 ## 6 クロダイ属 前上顎骨 右 1期 27.1 とある貝塚 3.6 select()による列の操作 dplyr::select()関数を使うことで、データフレームから特定の列を選択したり、列名の変更ができます。Rの標準機能よりも直接的に指定することができます。 3.6.1 列を抽出、削除する #列を抽出する。 fish %&gt;% dplyr::select(Fish,Period) %&gt;% head() ## # A tibble: 6 × 2 ## Fish Period ## &lt;fct&gt; &lt;fct&gt; ## 1 マダイ 1期 ## 2 クロダイ属 1期 ## 3 コイ科 1期 ## 4 サケ属 1期 ## 5 サケ属 1期 ## 6 サメ類 1期 :を使うことでまとめて選択することもできます。 # Site列からPeriod列までをまとめて抽出する。 fish %&gt;% dplyr::select(Bone:Period) %&gt;% head() ## # A tibble: 6 × 3 ## Bone Direction Period ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; ## 1 椎骨 中 1期 ## 2 前上顎骨 左 1期 ## 3 主鰓蓋骨 右 1期 ## 4 椎骨 中 1期 ## 5 椎骨 中 1期 ## 6 椎骨 中 1期 列名の前に-を加えることで、列を削除することができます。 # 不要な列を削除する。 fish %&gt;% dplyr::select(-Direction) %&gt;% head() ## # A tibble: 6 × 5 ## Fish Bone Period PML Site ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 マダイ 椎骨 1期 NA とある貝塚 ## 2 クロダイ属 前上顎骨 1期 NA とある貝塚 ## 3 コイ科 主鰓蓋骨 1期 NA とある貝塚 ## 4 サケ属 椎骨 1期 NA とある貝塚 ## 5 サケ属 椎骨 1期 NA とある貝塚 ## 6 サメ類 椎骨 1期 NA とある貝塚 3.6.2 列の順番を入れ替える # 列の順番を入れ替える。 # dplyr::everything()でその他の列をそのまま選択。 fish %&gt;% dplyr::select(Site, dplyr::everything()) %&gt;% head() ## # A tibble: 6 × 6 ## Site Fish Bone Direction Period PML ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 とある貝塚 マダイ 椎骨 中 1期 NA ## 2 とある貝塚 クロダイ属 前上顎骨 左 1期 NA ## 3 とある貝塚 コイ科 主鰓蓋骨 右 1期 NA ## 4 とある貝塚 サケ属 椎骨 中 1期 NA ## 5 とある貝塚 サケ属 椎骨 中 1期 NA ## 6 とある貝塚 サメ類 椎骨 中 1期 NA 3.6.3 列のリネーム dplyr::select()関数では列名の変更もできますが、dplyr::everything()とセットで使用する必要があります。dplyr::rename()を使った方が直感的かつ省エネで変更できます。 # &quot;新しい列名 = 修正したい列名&quot;でリネームが可能。 # `dplyr::select()`を使う場合は`dplyr::everything()`が必須。 fish %&gt;% dplyr::select(魚種 = Fish, dplyr::everything()) %&gt;% dplyr::rename(遺跡 = Site, 骨の名称 = Bone) %&gt;% head() ## # A tibble: 6 × 6 ## 魚種 骨の名称 Direction Period PML 遺跡 ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 マダイ 椎骨 中 1期 NA とある貝塚 ## 2 クロダイ属 前上顎骨 左 1期 NA とある貝塚 ## 3 コイ科 主鰓蓋骨 右 1期 NA とある貝塚 ## 4 サケ属 椎骨 中 1期 NA とある貝塚 ## 5 サケ属 椎骨 中 1期 NA とある貝塚 ## 6 サメ類 椎骨 中 1期 NA とある貝塚 3.7 mutate()による列の編集 dplyrパッケージにおいて、dplyr::filter()と並んでよく使う関数がdplyr::mutate()です。新たに変数を追加したり、既存の変数を置き換えたりすることなどができます。 列の型もdplyr::mutate()を使って変更することができます。複数の列を選択する際にはdplyr::mutate_at()を使う方法もありますが、dplyr::across()を併用すれば、dplyr::mutate()だけで対応することができます。 3.7.1 mutate( )による列の追加 dplyr::mutate()関数を使用して列を追加します。また、同時に列の型を設定することもできます。 fish %&gt;% # 列を追加し、それぞれ文字を入れる dplyr::mutate(時代 = &quot;縄文時代前期&quot;, 地域 = &quot;北陸&quot;) %&gt;% head() ## # A tibble: 6 × 8 ## Fish Bone Direction Period PML Site 時代 地域 ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; &lt;chr&gt; &lt;chr&gt; ## 1 マダイ 椎骨 中 1期 NA とある貝塚 縄文時代前期 北陸 ## 2 クロダイ属 前上顎骨 左 1期 NA とある貝塚 縄文時代前期 北陸 ## 3 コイ科 主鰓蓋骨 右 1期 NA とある貝塚 縄文時代前期 北陸 ## 4 サケ属 椎骨 中 1期 NA とある貝塚 縄文時代前期 北陸 ## 5 サケ属 椎骨 中 1期 NA とある貝塚 縄文時代前期 北陸 ## 6 サメ類 椎骨 中 1期 NA とある貝塚 縄文時代前期 北陸 #### 「時代」のみfctrに変更する場合 #### fish %&gt;% dplyr::mutate(時代 = factor(&quot;縄文時代前期&quot;), 地域 = &quot;北陸&quot;) %&gt;% head() ## # A tibble: 6 × 8 ## Fish Bone Direction Period PML Site 時代 地域 ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;chr&gt; ## 1 マダイ 椎骨 中 1期 NA とある貝塚 縄文時代前期 北陸 ## 2 クロダイ属 前上顎骨 左 1期 NA とある貝塚 縄文時代前期 北陸 ## 3 コイ科 主鰓蓋骨 右 1期 NA とある貝塚 縄文時代前期 北陸 ## 4 サケ属 椎骨 中 1期 NA とある貝塚 縄文時代前期 北陸 ## 5 サケ属 椎骨 中 1期 NA とある貝塚 縄文時代前期 北陸 ## 6 サメ類 椎骨 中 1期 NA とある貝塚 縄文時代前期 北陸 #### 列の型を文字型（chr）から因子型（fctr）にまとめて変更 #### fish %&gt;% dplyr::mutate(時代 = &quot;縄文時代前期&quot;, 地域 = &quot;北陸&quot;) %&gt;% dplyr::mutate(dplyr::across(c(時代, 地域), factor)) %&gt;% head() ## # A tibble: 6 × 8 ## Fish Bone Direction Period PML Site 時代 地域 ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; ## 1 マダイ 椎骨 中 1期 NA とある貝塚 縄文時代前期 北陸 ## 2 クロダイ属 前上顎骨 左 1期 NA とある貝塚 縄文時代前期 北陸 ## 3 コイ科 主鰓蓋骨 右 1期 NA とある貝塚 縄文時代前期 北陸 ## 4 サケ属 椎骨 中 1期 NA とある貝塚 縄文時代前期 北陸 ## 5 サケ属 椎骨 中 1期 NA とある貝塚 縄文時代前期 北陸 ## 6 サメ類 椎骨 中 1期 NA とある貝塚 縄文時代前期 北陸 3.7.2 場合分けによる列の編集 dplyr::case_when()やdplyr::if_else()を組み合わせることで、条件を満たす列を作成することもできます。既存の列にある変数を編集（置き換え）することも可能です。 fish %&gt;% filter(PML &gt; 0 &amp; Fish == &quot;クロダイ属&quot;) %&gt;% # `case_when()`で場合分けをして、時代という列を作成する。 # 最後を`TRUE ~ NA`で一致しないものを。 dplyr::mutate(Period = factor( case_when( Period == &quot;1期&quot; ~ &quot;縄文1期&quot;, Period == &quot;2期&quot; ~ &quot;縄文2期&quot;, # `grepl`は正規表現で、文字列が一致するものをTRUE、FALSEを返す。 grepl(&quot;3期&quot;, Period) ~ &quot;縄文3期&quot;, TRUE ~ NA)) )%&gt;% # `if_else()`で場合分けをして、大きさという列を作成する。 dplyr::mutate(Size = if_else(PML &lt; 30.0, &quot;small&quot;, &quot;Large&quot;)) %&gt;% head() ## # A tibble: 6 × 7 ## Fish Bone Direction Period PML Site Size ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; &lt;chr&gt; ## 1 クロダイ属 前上顎骨 左 縄文1期 20.6 とある貝塚 small ## 2 クロダイ属 前上顎骨 右 縄文1期 29.6 とある貝塚 small ## 3 クロダイ属 前上顎骨 右 縄文1期 20.4 とある貝塚 small ## 4 クロダイ属 前上顎骨 左 縄文1期 29.5 とある貝塚 small ## 5 クロダイ属 前上顎骨 右 縄文1期 24.4 とある貝塚 small ## 6 クロダイ属 前上顎骨 右 縄文1期 27.1 とある貝塚 small 3.7.3 文字列の置き換え dplyr::case_when()以外にもdplyr::mutate()関数と組み合わせることで、文字列の置き換えをすることができます。特にstringr::str_replace()はより明示的に文字の置き換えをすることができます。 fish %&gt;% filter(Fish == &quot;クロダイ属&quot;) %&gt;% dplyr::mutate(Site = stringr::str_replace(Site, &quot;とある&quot;, &quot;ござる&quot;)) %&gt;% dplyr::mutate(Fish = stringr::str_replace(Fish, &quot;クロダイ属&quot;, &quot;クロダイ&quot;)) %&gt;% # 型がchr型になってしまうので、factor型に戻す。 dplyr::mutate(dplyr::across(c(Fish, Site), as.factor)) %&gt;% head() ## # A tibble: 6 × 6 ## Fish Bone Direction Period PML Site ## &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 クロダイ 前上顎骨 左 1期 NA ござる貝塚 ## 2 クロダイ 前上顎骨 右 1期 NA ござる貝塚 ## 3 クロダイ 前上顎骨 右 1期 NA ござる貝塚 ## 4 クロダイ 歯骨 左 1期 NA ござる貝塚 ## 5 クロダイ 前上顎骨 右 2期 NA ござる貝塚 ## 6 クロダイ 前上顎骨 右 2期 NA ござる貝塚 3.8 summarize()による概要表 Rではsummary()関数で各列の個数や平均値といったデータの概要を知ることができます。基本的な統計情報を概要表（summary table）としてみることができます。 表3.7のように、dplyr::group_by()でグループ化した変数についての必要な要約統計量を、dplyr::summarize()関数で概要表を作成することもできます。 概要表を作成することで全体の傾向や特性といったデータの特徴を理解しやすくなり、さらにはデータを比較する場合でも数値的な違いを把握することができます。 fish %&gt;% summary() ## Fish Bone Direction Period PML ## スズキ属 :3054 前上顎骨:2252 - : 95 1期 :3675 Min. :15.50 ## クロダイ属:2900 椎骨 :1974 不明:1243 1期-2期:2158 1st Qu.:24.90 ## マダイ :1197 歯骨 :1946 中 :2754 1期-3期: 813 Median :27.90 ## タイ科 :1077 主鰓蓋骨:1910 右 :4018 2期 :4787 Mean :27.83 ## フグ科 : 794 主上顎骨: 603 左 :4200 3期 : 777 3rd Qu.:30.70 ## コイ科 : 780 角骨 : 486 不明 : 100 Max. :40.20 ## (Other) :2508 (Other) :3139 NA&#39;s :11786 ## Site ## とある貝塚:12310 ## ## ## ## ## ## fish %&gt;% dplyr::filter(Period %in% c(&quot;1期&quot;, &quot;2期&quot;, &quot;3期&quot;) &amp; PML &gt; 0) %&gt;% dplyr::group_by(Period) %&gt;% dplyr::summarize( count = as.numeric(n()), # 個数 mean = round(mean(PML), 1), # 平均 median = round(median(PML),1), # 中央値 var. = round(var(PML), 1), # 分散 S.D. = round(sd(PML), 1), # 標準偏差 .groups = &quot;drop&quot;) %&gt;% # グルーピング解除 data.frame() %&gt;% knitr::kable(caption = &quot;`dplyr::summarize()`による概要表&quot;) 表 3.7: dplyr::summarize()による概要表 Period count mean median var. S.D. 1期 172 28.8 29.1 14.3 3.8 2期 209 27.3 27.5 23.1 4.8 3期 30 26.6 26.0 19.5 4.4 「ネ申エクセル」ともいう。この弊害については奥村(2013)が詳しい。↩︎ "],["ggplot2を使用したデータビジュアライゼーション.html", "4 ggplot2を使用したデータビジュアライゼーション 4.1 データ可視化の重要性 4.2 見た目を設定する 4.3 ヒストグラム 4.4 棒グラフ 4.5 円グラフ 4.6 箱ひげ図 4.7 折れ線グラフ", " 4 ggplot2を使用したデータビジュアライゼーション 4.1 データ可視化の重要性 データの特徴を知るために概要表を作成が重要であることは前章で示しましたが、それだけでは十分ではありません。インターネットでデータの可視化の重要性を検索すると様々なメリットを知ることができます。論文等で明示されることは少ないようですが、鈴木・鈴村(2015)では以下の6点が指摘されています。 「データの持つ意味」を発見しやすくなる 状態（状況）の特徴が把握しやすくなる 数量の比較がしやすくなる 相関性が把握しやすくなる 変化（推移）が把握しやすくなる –鈴木・鈴村(2015)pp.474より ggplot2の開発者らは、有名な統計学者のTukey氏の次の主張を引用しています(Wickham &amp; Grolemund, 2017)。 The simple graph has brought more information to the data analyst’s mind than any other device. （意訳）シンプルな図は、他のどんな装置よりも多くの情報を私たちにもたらした。 – Tukey(1962)pp.49より Tukey氏は「探索的データ解析（EDA:Explorary Data Analysis）」を提唱し、「箱ひげ図」などの直感的でわかりやすいグラフを提示したことで知られています。これらのメッセージからも可視化の重要性、メリットが端的に理解できるでしょう。 さて話題が脱線しつつありますが、ここで要約統計量だけでなく、データ可視化が重要であることを理解するために、Alberto Cairoが作成・公開しているdatasauRusパッケージを利用します。このパッケージには13のグループと\\(x\\)と\\(y\\)データからなるデータセットが含まれており、それらは同じ平均と標準偏差、ピアソン相関係数を示しています。このうち3つのグループの要約統計量を示したものが表4.1です。このデータをプロットすると、恐竜 （Anscombosaurus2）や星形、X字形が現れ、要約統計量は一致するにも関わらず、データの分布は全く異なることがわかります（図4.1）。Same Stats, Different Graphsにアニメーションも掲載されているので、理解が深まるでしょう。 このように、平均や標準偏差といった基本的な要約統計量だけではデータ全体を把握することはできません。データの分布を可視化することで、より多くの情報を把握することができます。 表 4.1: 概要表 dataset x_mean y_mean x_S.D. y_S.D. dino 54.3 47.8 16.8 26.9 star 54.3 47.8 16.8 26.9 x_shape 54.3 47.8 16.8 26.9 図 4.1: 可視化の重要性 可視化にはggplot2パッケージを使います。ggplot2では、レイヤーを重ねて、一つのグラフを作成します。レイヤーは、作成したグラフのデータ、グラフの種類（geom_*()関数）、見た目や位置調整などを組み合わせるもので、それぞれ+で連結させていきます。 4.2 見た目を設定する 4.2.1 日本語フォントを探す ggplot2で可視化するデータおよび図で日本語が含まれる場合、そのままの設定では表示されないので、あらかじめ使用するフォントを明示する必要があります。 systemfontsパッケージのsystemfonts::system_fonts()関数を使えば、システム中のフォントを調べることができます。この後theme_*()で使用する引数base_familyで各自のPCにある日本語フォントを指定することで表示することができます。 # 日本語フォントを探し設定する。 library(systemfonts) fonts &lt;- systemfonts::system_fonts() # 基本となる背景を作成 base &lt;- data.frame(x = c(0, 1.5, 3), y = c(0, 1.5, 3), type = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)) %&gt;% ggplot() + geom_point(aes(x, y, color = type, fill = type)) + labs(x = &quot;x軸の名称を設定&quot;, y = &quot;y軸の名称を設定&quot;, title = &quot;theme( )での設定&quot;, subtitle = &quot;サブタイトル&quot;, colour = &quot;凡例の名称を設定&quot;, # `colour`で設定したものの名称変更 fill = &quot;凡例の名称を設定&quot;, # `fill`で設定したものの名称変更 caption = &quot;(このデータは...)&quot;) base + labs(x = &quot;日本語&quot;, y = &quot;個数&quot;, title = &quot;`base_family =`で日本語を設定できる&quot;) + theme_bw() # 日本語に設定 base + labs(x = &quot;日本語&quot;, y = &quot;個数&quot;, title = &quot;`base_family =`で日本語を設定できる&quot;) + theme_bw(base_family = &quot;HiraginoSans-W3&quot;) # 日本語を使用する場合 4.2.2 見た目の設定 theme_*()は図の背景を設定することができます（図4.2）。デフォルトではtheme_greyが設定されており、背景がグレーのタイルで表示されます。一般的な論文だとモノクロ印刷であるためtheme_bw()、theme_minimal()、theme_classic()が適しています。このtheme_*()で使用できる引数はbase_size（文字の大きさ）、base_family（フォント）、base_line_size（罫線）、base_rect_size（枠線）の4つに限られています。 theme()を用いると、タイトル・ラベル・フォント・背景・罫線・凡例をさらに細かく設定でき、引数はそれに応じて多岐に渡ります（図4.3）。element_*()とセットで使うことが多く、element_blank()（何も表示せず、スペースも差し込まない）、element_rect()（罫線と背景）、element_line()（線関係）、element_text()（文字関係）の4つがあります。 theme_*()はセット販売とすれば、theme()は単品販売のようなものでしょうか。theme_*()はtheme()で上書きすることも可能ですので、基本的にはtheme_*()を使い、必要に応じて変更するとよいと思います。表示にこだわりがある場合や、theme_*()が論文の投稿規定等に合致しない場合などは、theme()を使って詳細に設定するとよいでしょう（図4.4）。 ggplot2の制作者らが“ggplot2: Elegant Graphics for Data Analysis”で解説を公開しているので参照してください(Wickham, 2016)。 図 4.2: theme_*()の表示例 # 基本のプロットに`theme()`を設定する base + labs(x = &quot;x軸の名称を設定&quot;, y = &quot;y軸の名称を設定&quot;, title = &quot;theme( )での設定&quot;) + theme(title = element_text(family = &quot;Osaka&quot;, face = &quot;bold&quot;, colour = &quot;blue&quot;, size = 14), # タイトルの設定 axis.title.x = element_text(family = &quot;HiraMaruProN-W4&quot;, colour = &quot;red&quot;, size = 11), # x軸の名前の設定 axis.title.y = element_text(family = &quot;HiraMaruProN-W4&quot;, colour = &quot;green&quot;), # y軸の名前を消す panel.grid.major = element_line(linetype = &quot;solid&quot;, colour = &quot;black&quot;, linewidth = 0.2), # 罫線の主線の設定 panel.grid.minor = element_line(linetype = &quot;dotted&quot;, colour = &quot;black&quot;, linewidth = 0.2) # 罫線の副線の設 ) 図 4.3: theme()の設定例 # `my_theme`に格納しておけば労力を省略できる。 my_theme &lt;- theme(text = element_text(family = &quot;HiraginoSans-W3&quot;, size = 9), # 日本語フォントの設定 title = element_text(size = 11), # タイトルの設定 # 軸（axis）関係 axis.title = element_text(colour = &quot;black&quot;, size = 9), # 軸の名称の設定 panel.grid.major = element_line(linetype = &quot;solid&quot;, colour = &quot;grey&quot;, linewidth = 0.2), # 罫線の主線の設定 panel.grid.minor = element_line(linetype = &quot;dotted&quot;, colour = &quot;grey&quot;, linewidth = 0.2), # 罫線の副線の設定 panel.background = element_blank(), # 背景を空白に設定 panel.border = element_rect(linetype = &quot;solid&quot;, linewidth = 0.5, fill = NA), # 凡例（legend）関係 legend.direction = &quot;horizontal&quot;, # 水平にする legend.position = &quot;bottom&quot;, # 凡例の位置 legend.background = element_blank(), # キャプション（caption）関係 plot.caption = element_text(size = 8), # facet関係 strip.background = element_rect(fill = &quot;grey90&quot;) # `facet_wrap`等のタイトル ) base + my_theme 図 4.4: theme()で好みの見た目に設定できる 4.3 ヒストグラム 4.3.1 ヒストグラムとは ヒストグラムは量的データの分布を把握するために用いられるグラフです。一見棒グラフによく似ていますが、ヒストグラムが量的データのうち連続データを用いるのに対し、棒グラフは離散データを使用するという違いがあります。 ggplot2では、ggplot2::geom_histogramを使用します。\\(x\\)軸にはPML（前上顎骨長）を、\\(y\\)軸では相対度数（density）や個数（count）を設定します。少数のデータの場合は個数で表現した方が良い場合がありますが、異なるサイズのデータを比較する場合や分布の形状を比較する場合は相対度数で示した方が良いようです。 図4.5は、ggplot2::geom_histogramのデフォルト設定で出力したもので、ここからレイヤーを重ねていくことで、より美しくわかりやすい可視化をすることができます。ビン数はデフォルトで30ですが、binsでビン数を指定することもできます。ビン数は計算で算出することもできます（スタージェスの公式など）。 考古学では先行研究の蓄積が前提となる場合がほとんどなので、それに準じる形でビン幅をを設定する場面が多いと思われます。ビン幅はbinwidthで設定することができます。ビン幅の設定によっては見た目が変わってしまうことがあり、作成者の恣意的な解釈に沿った作図も可能となるため、ビン幅の設定やヒストグラムを読み取る際には留意しなければいけません。 hist &lt;- fish %&gt;% ggplot() + ggplot2::geom_histogram(aes(x = PML, y = after_stat(count))) hist 図 4.5: geom_histogramのデフォルト表示 4.3.2 複数のヒストグラムを表示する ヒストグラムで次元を追加する場合（グループ分け等）、事前にデータフレームの任意の列の型をcharacter型（文字）からfactor型（因子）に変換します。グラフの描写の中でもlevels =で任意の順番に変更することもできます。 1つのグラフの中で複数の変数（グループなど）を表示する場合は、position =で描写方法を指定します。stackのほか、identityやdodgeがあります（図4.6）。 一方、よく似た分布を示したデータの場合は、それぞれでヒストグラムを作成した方が見やすく、ggplot2::facet_wrap()関数や、変数が多い場合はfacet_grid()関数で表現すると比較しやすくなります。多くの場合はfacet_wrap()関数で十分です（図4.7）。 hist_2 &lt;- fish %&gt;% dplyr::filter(Fish == &quot;クロダイ属&quot; &amp; Direction == &quot;左&quot; &amp; Period %in% c(&quot;1期&quot;, &quot;2期&quot;, &quot;3期&quot;) &amp; PML &gt; 0) %&gt;% # `mutate_at`と`as.factor`を組み合わせて型を変更 dplyr::mutate_at(c(&quot;Period&quot;, &quot;Fish&quot;, &quot;Bone&quot;), as.factor) %&gt;% ggplot() + ggplot2::geom_histogram(aes(x = PML, y = after_stat(density), fill = Period), binwidth = 5, # bin幅の設定 colour = &quot;black&quot;, # グラフの枠線の色 position = &quot;stack&quot;, # 表示方法 boundary = 0) + # ビンの境界を指定 labs(x = &quot;PML（mm）&quot;) + scale_x_continuous(breaks = seq(0, 50, 10), limits=c(10, 50)) + # x軸の範囲を設定 my_theme hist_2 図 4.6: position = \"stack\"での描写 hist_3 &lt;- fish %&gt;% dplyr::filter(Fish == &quot;クロダイ属&quot; &amp; Direction == &quot;左&quot; &amp; Period %in% c(&quot;1期&quot;, &quot;2期&quot;, &quot;3期&quot;) &amp; PML &gt; 0) %&gt;% ggplot() + ggplot2::geom_histogram(aes(x = PML, y = after_stat(density)), binwidth = 5, # bin幅の設定 fill = &quot;white&quot;, # グラフの塗りの色 colour = &quot;black&quot;, # グラフの枠線の色 boundary = 0) + # ビンの境界を指定 labs(x = &quot;PML（mm）&quot;) + scale_x_continuous(breaks = seq(0, 50, 10), limits=c(0, 50)) + # x軸の範囲を設定 my_theme + # facet_wrapで遺構毎に分割して表示する。 facet_wrap(~Period, # scales = &quot;free_y&quot;, # y軸をそれぞれ設定する時 nrow = 1, labeller = as_labeller(c(`1期` = &quot;縄文1期&quot;, `2期` = &quot;縄文2期&quot;, `3期` = &quot;縄文3期&quot; ))) #as_labellerでラベル名を変更。``で明示することでエラーを回避。 hist_3 図 4.7: facet_weap()の描写 4.3.3 グラフの情報を取得する また、表4.2のようにggplot2::ggplot_build()でggplot2で描写したグラフの情報を取得することも可能です。 hist_info &lt;- hist_3 %&gt;% ggplot_build() hist_info_df &lt;- data.frame(hist_info$data) hist_info_df %&gt;% dplyr::select(PANEL, count, xmin, xmax, x, y, density) %&gt;% head(n = 9) %&gt;% knitr::kable(caption = &quot;作成したヒストグラムの情報&quot;) 表 4.2: 作成したヒストグラムの情報 PANEL count xmin xmax x y density 1 0 0 5 2.5 0.0000000 0.0000000 1 0 5 10 7.5 0.0000000 0.0000000 1 0 10 15 12.5 0.0000000 0.0000000 1 2 15 20 17.5 0.0046512 0.0046512 1 11 20 25 22.5 0.0255814 0.0255814 1 44 25 30 27.5 0.1023256 0.1023256 1 26 30 35 32.5 0.0604651 0.0604651 1 3 35 40 37.5 0.0069767 0.0069767 1 0 40 45 42.5 0.0000000 0.0000000 4.4 棒グラフ 先述した通りヒストグラムは量的データのうち連続データを示すものですが、棒グラフは量的データのうち離散データを示す際に用いるグラフです。棒グラフは棒の高さでデータの大小を示し、値の高低を判別する際に有効です。 4.4.1 棒グラフ ggplot2ではggplot2::geom_bar()で描写することができます。棒グラフで変数を追加する場合（グループを加える等）はfill =で変数を指定できます。これの機能を利用して帯グラフ（積み上げ棒グラフ）作成することもできます。 bar &lt;- fish %&gt;% dplyr::filter(Period %in% c(&quot;1期&quot;, &quot;2期&quot;, &quot;3期&quot;)) %&gt;% ggplot() + ggplot2::geom_bar(aes(x = Period)) + my_theme # 日本語を使用する場合 bar 図 4.8: geom_barのデフォルト表示 4.4.2 帯グラフ 帯グラフを描写したい時もggplot2::geom_bar()を使い、\\(y\\)軸いっぱいに引き伸ばすposition = \"fill\"とパーセンテージで表示するscale_y_continuous(labels = scales::percent)を指定します。多くの場合は横方向が好ましいのでcoord_flip()も加えます。 band &lt;- fish %&gt;% dplyr::filter(Period %in% c(&quot;1期&quot;, &quot;2期&quot;, &quot;3期&quot;)) %&gt;% ggplot2::ggplot() + geom_bar(aes(x = Period, fill = Fish), position = &quot;fill&quot;) + # 帯グラフにする scale_y_continuous(labels = scales::percent) + my_theme + theme(axis.title.x = element_blank(), # x軸のタイトルを消す axis.title.y = element_blank() # y軸のタイトルを消す ) + coord_flip() band 図 4.9: 帯グラフ 割合の少ない項目は「その他」等にまとめた方が視認性が上がることが知られています。ここでは上位5つより下位の魚種を「その他」にまとめ、主要な捕獲対象となった魚種を調べます。 #### ラベルを作成する #### # 魚種の出土数トップ9を抽出 top5 &lt;- fish %&gt;% dplyr::filter(Period %in% c(&quot;1期&quot;, &quot;2期&quot;, &quot;3期&quot;)) %&gt;% dplyr::group_by(Fish) %&gt;% # グループ化 dplyr::summarize(count = n(), # 魚種の個数をカウント .groups = &quot;drop&quot; # グループ解除しておく癖をつける。 ) %&gt;% dplyr::arrange(desc(count)) %&gt;% # `desc()`関数は降順に、`arrange()`関数で並べ替える。 top_n(5) %&gt;% # `top_n()`関数で上位のデータだけ抽出する dplyr::mutate(Fish = as.character(Fish)) # top9$Fishがfactor型だと調子が悪い。 ##### 帯グラフに割り付ける #### band_2 &lt;- fish %&gt;% dplyr::filter(Period %in% c(&quot;1期&quot;, &quot;2期&quot;, &quot;3期&quot;)) %&gt;% droplevels() %&gt;% dplyr::mutate(Fish = factor(if_else(Fish %in% top5$Fish, Fish, &quot;その他&quot;), levels = c(top5$Fish, &quot;その他&quot;))) %&gt;% ggplot() + ggplot2::geom_bar(aes(x = Period, fill = Fish), color = &quot;black&quot;, position = &quot;fill&quot;) + # 帯グラフにする # `scale_y_reverse()` はグラフのy軸を逆順に表示するための関数（見た目のみ）。 # `breaks=`部分：y軸の目盛りを0から1まで、0.2刻みで設定します。 # `labels=`部分：0から80まで、20刻みで目盛りを設定し、 # それを逆順にしています（`rev()`関数を使用） scale_y_reverse(breaks = seq(0, 1.0, by = 0.2), labels = c(&quot;100 %&quot;, rev(seq(0, 80, by = 20)))) + my_theme + theme(axis.title.x = element_blank(), # x軸のタイトルを消す axis.title.y = element_blank(), # y軸のタイトルを消す ) + coord_flip() band_2 図 4.10: 構成する種類をまとめた帯グラフ また、ggpatternパッケージのggpattern::geom_bar_pattern()を使用すれば、論文で使うような水玉や斜線、網掛け線などのパターン表示をすることもできます。@ocean_fさんのQiitaで作例が公開されています。 #### 時期毎の集計表を作成し、割り付けるラベルを作成 #### fish_summarize &lt;- fish %&gt;% dplyr::filter(Period %in% c(&quot;1期&quot;, &quot;2期&quot;, &quot;3期&quot;)) %&gt;% droplevels() %&gt;% # 次の処理のために不要なレベルを削除しておく（重要） #`if_else()`関数で場合分けする。トップ5以外は&quot;その他&quot;としてまとめる。 #`levels`引数に`top5$Fish`を指定して、top5の順序通りにする。 dplyr::mutate(Fish = factor(if_else(Fish %in% top5$Fish, Fish, &quot;その他&quot;), levels = c(top5$Fish, &quot;その他&quot;))) %&gt;% dplyr::group_by(Fish, Period) %&gt;% # グループ化 dplyr::summarize(count = n(), # 時期毎の個数をカウント .groups = &quot;drop&quot; # グループ解除しておく癖をつける。 ) %&gt;% dplyr::group_by(Period) %&gt;% dplyr::mutate(pct = count / sum(count), # 時期毎の割合を算出 cum_pct = cumsum(pct), # 時期毎の累積割合を算出 pct_label = format( # 時期毎のラベルを作成 round(pct * 100, 1), # `fotmat()`で小数点第1位まで表示 nsmall = 1) ) %&gt;% ungroup() %&gt;% # グループ解除しておく癖をつける。 arrange(Period) # `desc()`関数がない場合は昇順になる。 ##### 論文風にする #### # `ggpattern::geom_bar_pattern`で論文風にできる。 library(ggpattern) band_3 &lt;- fish_summarize %&gt;% ggplot() + ggpattern::geom_bar_pattern(aes(x = Period, y = pct, # `geom_bar_pattern`ではyを指定する必要がある。 fill = Fish, pattern = Fish, pattern_spacing = Fish, pattern_density = Fish), color = &quot;black&quot;, # グラフの線の色を設定 pattern_fill = &quot;black&quot;, # パターンの線の色を設定 pattern_color = NA, stat = &quot;identity&quot;, position = &quot;fill&quot;) + # 帯グラフのパターンを設定する ggplot2::scale_fill_manual(name = &quot;Fish&quot;, values = c(&quot;grey50&quot;, &quot;white&quot;, &quot;grey75&quot;, &quot;white&quot;, &quot;white&quot;, &quot;grey95&quot;), guide = guide_legend(byrow = TRUE)) + ggpattern::scale_pattern_manual(name = &quot;Fish&quot;, values = c(&quot;none&quot;, &quot;stripe&quot;, &quot;none&quot;, &quot;circle&quot;, &quot;crosshatch&quot;, &quot;none&quot;), guide = guide_legend(byrow = TRUE)) + ggpattern::scale_pattern_density_manual(name = &quot;Fish&quot;, values = c(NA, 0.1, NA, 0.2, 0.1, NA), guide = guide_legend(byrow = TRUE)) + ggpattern::scale_pattern_spacing_manual(name = &quot;Fish&quot;, values = c(NA, 0.05, NA, 0.05, 0.05, NA), guide = guide_legend(byrow = TRUE)) + # `scale_y_reverse()` はグラフのy軸を逆順に表示するための関数（見た目のみ）。 # `breaks=`部分：y軸の目盛りを0から1まで、0.2刻みで設定します。 # `labels=`部分：0から80まで、20刻みで目盛りを設定し、 # それを逆順にしています（`rev()`関数を使用） scale_y_reverse(breaks = seq(0, 1.0, by = 0.2), labels = c(&quot;100 %&quot;, rev(seq(0, 80, by = 20)))) + my_theme + theme(axis.title.x = element_blank(), # x軸のタイトルを消す axis.title.y = element_blank(), # y軸のタイトルを消す ) + coord_flip() # 帯グラフに配置するラベルと座標を設定する。 fish_summarize &lt;- fish_summarize %&gt;% ungroup() %&gt;% # グループを解除しておく。 mutate(y = round((1 - cum_pct) + pct / 2 , 3)) # `scale_y_reverse()` でy座標の見た目が反転しているので1から引く。 # 作図・出力（library(ggtext)でラベルを設定） band_3 + ggtext::geom_richtext(aes(x = fish_summarize$Period, y = fish_summarize$y, label = fish_summarize$pct_label), fill = &quot;white&quot;, # ラベルの塗りの設定 label.color = NA, # ラベルの枠線の設定 size = 3, # 文字の大きさ fontface = &quot;bold&quot;, # 文字の太さ hjust = 0.5, # 上下の位置を設定 vjust = 0.5, # 左右の位置を設定 label.padding = unit(c(0.15, 0.1, 0.1, 0.1), &quot;lines&quot;), # ラベルの余白を設定 label.r = unit(0, &quot;lines&quot;)) # ラベルの角の丸みを設定 図 4.11: geom_bar_patternでの論文風の帯グラフ ggplot2の拡張機能であるggtext::geom_richtext()は、例えばテキストを太字、斜体にしたり、フォント、色、サイズを変更するなどの見た目の設定や、テキストを下付き文字や上付き文字として配置したり、簡単な画像を貼り付けたりすることができ、細かな設定もできます。label.paddingはラベルの文字列と枠の間の余白をunit()を使って指定できる機能で、label.rはラベルの角の丸みを設定することができます。引数の使用例は「からっぽのしょこ」さん等の個人ブログを参照した方がわかりやすい。 なお、上記のような帯グラフはエクセルでも比較的簡単に作成できる一方、ggplot2では非常に手間がかかるのが弱点です。あらかじめ1つフォーマットを作っておき、使い回しできるようにしておくと時間の短縮となって良いです。 4.5 円グラフ 円グラフは、データ全体を円形で、データ構成する各項目を円形を分割する扇形で表現したグラフで、通常は割合（パーセンテージ）で表示されます。円グラフはエクセルで簡単に作成できることから、割合を表現する方法として広く用いられていますが、学術研究では好ましくないことが指摘されています。 考古学では、石井(2020)が下記のRのヘルプを参照しつつ指摘しています（コンソールで?pieと入力すれば確認できます）。 Pie charts are a very bad way of displaying information. The eye is good at judging linear measures and bad at judging relative areas. A bar chart or dot chart is a preferable way of displaying this type of data. （意訳）円グラフは情報を表示するのに非常に不適切な方法です。人間の目は線の長さを判断するのは得意ですが、相対的な面積を判断するのは苦手です。棒グラフやドットチャート（ドットプロット。ヒストグラムの一種）の方が、この種類のデータを表示するのに適しています。 Cleveland (1985), page 264: “Data that can be shown by pie charts always can be shown by a dot chart. This means that judgements of position along a common scale can be made instead of the less accurate angle judgements.” This statement is based on the empirical investigations of Cleveland and McGill as well as investigations by perceptual psychologists. （意訳）Cleveland (1985)の264ページには次のように書かれている。「円グラフで表示できるデータは、常にドットチャートで表示することができる。これにより、より正確な位置の判断ができるようになり、角度の判断よりも正確性が向上する。」この主張は、ClevelandとMcGillの実証的な調査や知覚心理学者の調査に基づいている。 米ワシントン大学の考古学者のBen Marwick氏が先行研究等をまとめたところによると、円グラフはカテゴリー間の比較では棒グラフに劣る一方、全体の割合の推定では円グラフは棒グラフと同程度正確であるとのことです(Marwick, 2019)。一概に円グラフが悪いということではなく、データの性質が最も把握できる表現方法を選択すべきということでしょう。 なお、ggplot2では円グラフ専用のgeom_*()関数はありませんが、ggplot2::geom_bar()を利用して作成することができます。 fish_summarize %&gt;% dplyr::mutate(pct2 = pct * 100) %&gt;% # パーセンテージ表示するため ggplot2::ggplot() + geom_bar(aes(x = &quot;&quot;, y = pct2, fill = Fish), stat = &quot;identity&quot;) + coord_polar(theta = &quot;y&quot;) + scale_y_reverse() + # 「そのほか」が左上に行くようにする。 facet_wrap(~Period) + my_theme + theme( # themeの更新 line = element_blank(), # 余計なラインを消す rect = element_blank(), # 余計な枠線を消す panel.grid.major = element_blank(), # 余計な罫線を消す axis.title = element_blank(), # 軸のタイトルを消す panel.border = element_blank() # `facet_wrap`のパネルの枠線を消す ) 4.6 箱ひげ図 4.6.1 箱ひげ図 箱ひげ図は「中央値」、「第1四分位数」、「第3四分位数」、「最小値」、「最大値」の5つ要約統計量を視覚的に表現するための図です。箱の両端は「第1四分位数」3 （Q1）と「第3四分位数」（Q3）を示し、箱のことを「四分位範囲」といいます。箱中央にある線は「中央値」(Median)を示します。ひげの両端は「最小値」と「最大値」、その外側の点は「外れ値」を示します。 箱ひげ図は、アメリカの統計学者John Tukey氏が1977年に著書”Exploratory Data Analysis”で発表した比較的新しいグラフです。今日では、一般的な統計手法として広く使用されています。ggplot2ではggplot2::geom_boxplot()で導出することができます。 なお、箱ひげ図は複数のピークを持つ分布を適切に表すことができないので、データの「分布」を説明したい場合は、ヒストグラムや後述のバイオリンプロット、シナプロットを使う必要があります。 box &lt;- fish %&gt;% dplyr::filter(Fish == &quot;クロダイ属&quot; &amp; Period %in% c(&quot;1期&quot;, &quot;2期&quot;, &quot;3期&quot;) &amp; Direction == &quot;左&quot; &amp; PML &gt; 0) %&gt;% ggplot(aes(x = Period, y = PML)) + # `x =`でグループを設定 geom_boxplot(width = 0.5, fill = &quot;white&quot;) + # 平均を描写する場合 stat_summary(fun = mean, geom = &quot;point&quot;, shape = 21, size = 3.0, color = &quot;white&quot;, fill = &quot;red&quot;) + labs(x = &quot;Archaeological Period&quot;, y = &quot;PML(mm)&quot;) + coord_flip() + my_theme box 4.6.2 バイオリンプロット／シナプロット バイオリンプロットはデータの分布を視覚的に表現するためのグラフです。5つの要約統計量を示す箱ひげ図よりも詳細な分布を知ることができます。バイオリンプロットはカーネル密度推定を用いて滑らかな曲線で表現されます。Leland Wilkinson氏が1999年に論文”Dot plots”で発表したグラフです(Wilkinson, 1999)。 シナプロットはバイオリンプロットと同じくデータの分布を可視化するためのグラフで、個々のデータをポイントで表示することができます。ggplot2でもggplot2::geom_jitterを使えば軸に幅を持たせて点をランダムに配置したグラフ（ジッタープロット）を描写することができますが、シナプロットはデータの密度分布に沿ってジッターの幅が制御され、データの数・密度分布・外れ値・広がりの情報がよりわかりやすくなっています。Nikos Sidiropoulos氏やSina Hadi Sohi氏らが2018年に論文”SinaPlot: An Enhanced Chart for Simple and Truthful Representation of Single Observations Over Multiple Classes”で発表しました(Sidiropoulos et al., 2018)。 バイオリンプロットはggplot2のggplot2::geom_violin()を用いて、ggplot2::geom_boxplot()と同じような使い方ができます（図4.12）。シナプロットはggforceパッケージのggforce::geom_sina()で実装することができます（図4.13）。バイオリンプロットとシナプロットともに、箱ひげ図などの他のグラフと組み合わせることも可能です（図4.14）。 #### バイオリンプロット #### violin &lt;- fish %&gt;% dplyr::filter(Fish == &quot;クロダイ属&quot; &amp; Period %in% c(&quot;1期&quot;, &quot;2期&quot;, &quot;3期&quot;) &amp; Direction == &quot;左&quot; &amp; PML &gt; 0) %&gt;% ggplot(aes(x = Period, y = PML)) + geom_violin(trim = FALSE, fill = &quot;white&quot;) + labs(x = &quot;Archaeological Period&quot;, y = &quot;PML(mm)&quot;) + coord_flip() + my_theme violin 図 4.12: バイオリンプロット #### ジッタープロット #### jitter &lt;- fish %&gt;% dplyr::filter(Fish == &quot;クロダイ属&quot; &amp; Period %in% c(&quot;1期&quot;, &quot;2期&quot;, &quot;3期&quot;) &amp; Direction == &quot;左&quot; &amp; PML &gt; 0) %&gt;% ggplot(aes(x = Period, y = PML)) + geom_jitter(width = 0.2) + labs(x = &quot;Archaeological Period&quot;, y = &quot;PML(mm)&quot;) + coord_flip() + my_theme #### シナプロット #### library(&quot;ggforce&quot;) sina &lt;- fish %&gt;% dplyr::filter(Fish == &quot;クロダイ属&quot; &amp; Period %in% c(&quot;1期&quot;, &quot;2期&quot;, &quot;3期&quot;) &amp; Direction == &quot;左&quot; &amp; PML &gt; 0) %&gt;% ggplot(aes(x = Period, y = PML)) + ggforce::geom_sina() + labs(x = &quot;Archaeological Period&quot;, y = &quot;PML(mm)&quot;) + coord_flip() + my_theme jitter sina 図 4.13: ジッタープロット（左）とシナプロット（右） #### 箱ひげ図にバイオリンプロットとシナプロットを重ねる #### box_violin_sina &lt;- fish %&gt;% dplyr::filter(Fish == &quot;クロダイ属&quot; &amp; Period %in% c(&quot;1期&quot;, &quot;2期&quot;, &quot;3期&quot;) &amp; Direction == &quot;左&quot; &amp; PML &gt; 0) %&gt;% ggplot(aes(x = Period, y = PML)) + # バイオリンプロットを描写 geom_violin(trim = FALSE, fill = &quot;black&quot;, linetype = &quot;blank&quot;, # 確率密度曲線の枠線をなしに。 alpha = 0.1) + # fillの透明度を設定する。 # 箱ひげ図を追加 geom_boxplot(width = 0.3, outliers = FALSE, # 外れ値の描写 ) + # シナプロットを追加 ggforce::geom_sina(alpha = 0.15, colour = &quot;black&quot;) + # 平均や中央値を描写する場合、`stat_summary()`を使えば良い。 stat_summary(fun = mean, geom = &quot;point&quot;, shape = 21, size = 2.0, color = &quot;white&quot;, fill = &quot;red&quot;) + labs(x = &quot;Archaeological Period&quot;, y = &quot;PML(mm)&quot;) + coord_flip() + my_theme box_violin_sina 図 4.14: 箱ひげ図と重ねて表示 4.7 折れ線グラフ 折れ線グラフはggplot2::geom_lineで描写することができます。今回は、COVID-19の感染者数のデータを利用して、一月ごとの感染者数の推移がわかるようなグラフを作成します。データには厚生労働省のホームページで「新規陽性者数の推移（日別）」が公開されているのでこれをダウンロードします。 このデータは横長型のデータなので、まず縦長型のtidy dataに変換します。 # データの読み込み covid19 &lt;- readr::read_csv(&quot;analysis/data/newly_confirmed_cases_daily.csv&quot;) covid19 %&gt;% head() ## # A tibble: 6 × 49 ## Date ALL Hokkaido Aomori Iwate Miyagi Akita Yamagata Fukushima Ibaraki ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2020/1/16 1 0 0 0 0 0 0 0 0 ## 2 2020/1/17 0 0 0 0 0 0 0 0 0 ## 3 2020/1/18 0 0 0 0 0 0 0 0 0 ## 4 2020/1/19 0 0 0 0 0 0 0 0 0 ## 5 2020/1/20 0 0 0 0 0 0 0 0 0 ## 6 2020/1/21 0 0 0 0 0 0 0 0 0 ## # ℹ 39 more variables: Tochigi &lt;dbl&gt;, Gunma &lt;dbl&gt;, Saitama &lt;dbl&gt;, Chiba &lt;dbl&gt;, ## # Tokyo &lt;dbl&gt;, Kanagawa &lt;dbl&gt;, Niigata &lt;dbl&gt;, Toyama &lt;dbl&gt;, Ishikawa &lt;dbl&gt;, ## # Fukui &lt;dbl&gt;, Yamanashi &lt;dbl&gt;, Nagano &lt;dbl&gt;, Gifu &lt;dbl&gt;, Shizuoka &lt;dbl&gt;, ## # Aichi &lt;dbl&gt;, Mie &lt;dbl&gt;, Shiga &lt;dbl&gt;, Kyoto &lt;dbl&gt;, Osaka &lt;dbl&gt;, Hyogo &lt;dbl&gt;, ## # Nara &lt;dbl&gt;, Wakayama &lt;dbl&gt;, Tottori &lt;dbl&gt;, Shimane &lt;dbl&gt;, Okayama &lt;dbl&gt;, ## # Hiroshima &lt;dbl&gt;, Yamaguchi &lt;dbl&gt;, Tokushima &lt;dbl&gt;, Kagawa &lt;dbl&gt;, ## # Ehime &lt;dbl&gt;, Kochi &lt;dbl&gt;, Fukuoka &lt;dbl&gt;, Saga &lt;dbl&gt;, Nagasaki &lt;dbl&gt;, … # 横長型のデータを縦長型（tidy data）に変換 covid19_tidy &lt;- covid19 %&gt;% dplyr::select(-ALL) %&gt;% # 不要な列の削除 tidyr::pivot_longer(cols = !Date,   # `!`で動かさないデータを指定 names_to = &quot;pref&quot;, values_to = &quot;infected&quot;) covid19_tidy %&gt;% head() ## # A tibble: 6 × 3 ## Date pref infected ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 2020/1/16 Hokkaido 0 ## 2 2020/1/16 Aomori 0 ## 3 2020/1/16 Iwate 0 ## 4 2020/1/16 Miyagi 0 ## 5 2020/1/16 Akita 0 ## 6 2020/1/16 Yamagata 0 変形したデータをdplyr::summarize()関数で、週ごとの合計を算出したのちにグラフを作成します。詳しくは「summarize()による概要表」を参照してください。 #### lubridateパッケージを使って日付型に変換。#### library(&quot;lubridate&quot;) # `lubridate::ymd()`で日付型にする。`dmy()`や`mdy()`もある。 covid19_tidy &lt;- covid19_tidy %&gt;% dplyr::mutate(dplyr::across(Date, lubridate::ymd)) #### データを編集する #### # `lubridate::floor_date`で週ごとのデータにする。 covid19_tidy &lt;- covid19_tidy %&gt;% dplyr::mutate(week_start = lubridate::floor_date(Date, unit = &quot;month&quot;)) # `dplyr::summarize`で週ごとの合計を算出。 covid19_monthly &lt;- covid19_tidy %&gt;% dplyr::group_by(week_start) %&gt;% dplyr::summarize(total = sum(infected), .groups = &quot;drop&quot;) covid19_monthly %&gt;% head() ## # A tibble: 6 × 2 ## week_start total ## &lt;date&gt; &lt;dbl&gt; ## 1 2020-01-01 14 ## 2 2020-02-01 213 ## 3 2020-03-01 1936 ## 4 2020-04-01 11952 ## 5 2020-05-01 2439 ## 6 2020-06-01 1741 # 折れ線グラフを描写する。 covid19_monthly %&gt;% ggplot2::ggplot(aes(x = week_start, y = total)) + geom_line() + # 折れ線グラフの表示 geom_point(size = 0.9) + # ポイントを表示する labs(x = &quot;月&quot;, y = &quot;感染者数&quot;) + scale_x_date(date_breaks = &quot;3 month&quot;, date_labels = &quot;%Y-%m&quot;) + # x軸の表示方法を変更する scale_y_continuous(labels = scales::comma) + # 数字にカンマを入れる my_theme + theme(axis.text.x = element_text(angle = 45, hjust = 1)) # x軸のラベルを45度回転させる 図 4.15: 折れ線グラフ 統計学者Francis Anscombe氏のAnscombe’s quartet（「アンスコムの例」）(Anscombe, 1973)に因んで命名された。↩︎ データを4つに分割した際に下からちょうど1/4にあるデータを「第1四分位数」、2/4にあるデータを「第2四分位数」（中央値）、3/4のところのデータを「第3四分位数」といい、これらを「四分位数」といいます。↩︎ "],["引用参考文献.html", "5 引用参考文献", " 5 引用参考文献 Álvarez, A. (2021). Plumbers, chains, and famous painters: The (updated) history of the pipe operator in R. In Adolfo Álvarez. Anscombe, F. J. (1973). Graphs in Statistical Analysis. The American Statistician, 27(1), 17–21. https://doi.org/10.2307/2682899 Marwick, B. (2019). Archaeological Science with R. https://benmarwick.github.io/aswr/. Sidiropoulos, N., Sohi, S. H., Pedersen, T. L., Porse, B. T., Winther, O., Rapin, N., &amp; Bagger, F. O. (2018). SinaPlot: An Enhanced Chart for Simple and Truthful Representation of Single Observations Over Multiple Classes. Journal of Computational and Graphical Statistics, 27(3), 673–676. https://doi.org/10.1080/10618600.2017.1366914 Tukey, J. W. (1962). The Future of Data Analysis. The Annals of Mathematical Statistics, 33(1), 1–67. https://www.jstor.org/stable/2237638 Wickham, H. (2014). Tidy Data. Journal of Statistical Software, 59, 1–23. https://doi.org/10.18637/jss.v059.i10 Wickham, H. (2016). Ggplot2: Elegant Graphics for Data Analysis (2nd ed. 2016). Springer International Publishing : Imprint: Springer. https://doi.org/10.1007/978-3-319-24277-4 Wickham, H., &amp; Bryan, J. (2023). R Packages: Organize, Test, Document, and Share Your Code (第2版 ed.). O’Reilly Media. Wickham, H., Çetinkaya-Rundel, M., &amp; Grolemund, G. (2023). R for Data Science (2e). https://r4ds.hadley.nz/. Wickham, H., &amp; Grolemund, G. (2017). R for Data Science. https://r4ds.had.co.nz/. Wilkinson, L. (1999). Dot plots. American Statistician, 53(3), 276–281. https://doi.org/10.1080/00031305.1999.10474474 奥村晴彦. (2013). 「ネ申Excel」問題. 情報教育シンポジウム2013論文集, 2013(2), 93–98. 村木二郎. (2004). 石塔の多様化と消長 : 天理市中山念仏寺墓地の背光五輪塔から（第一部 地域社会におけるカミ祭祀と葬墓制）. 国立歴史民俗博物館研究報告 = Bulletin of the National Museum of Japanese History, 112, 25–62. https://doi.org/10.15024/00001216 石井淳平. (2020). 考古学のためのデータビジュアライゼーション. 奈良文化財研究所研究報告, 24. 鈴木雅彦., &amp; 鈴村嘉右. (2015). データ可視化の必要性と意義: データビジュアライゼーションとは(\\(&lt;\\)特集\\(&gt;\\)情報をわかりやすくするデザイン). 情報の科学と技術, 65(11), 470–475. https://doi.org/10.18919/jkg.65.11_470 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
